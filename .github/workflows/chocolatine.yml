name : chocolatine
run-name: Running chocolatine

on: 
    pull_request:
        branches-ignore:
            - "ga-ignore-**"
    push:
        branches-ignore:
            - "ga-ignore-**"

env:
    MIRROR_URL: "git@github.com:EpitechPromo2028/B-DOP-200-PAR-2-1-chocolatine-leticia.fraga.git"
    MIRROR_NAME: "EpitechPromo2028/B-DOP-200-PAR-2-1-chocolatine-leticia.fraga"
    EXECUTABLES: "a.out"

jobs:
    is_not_mirror:
        name: 'Check Repo Name'
        runs-on: ubuntu-latest
        steps:
            - name: 'Validate repo name'
              if: ${{ github.repository == env.MIRROR_NAME}}
              run: exit 1
    check_coding_style:
        name: 'Check Coding Style'
        needs: is_not_mirror
        runs-on: ubuntu-latest
        container: ghcr.io/epitech/coding-style-checker:latest
        steps:
            - name: 'Checkout'
              uses: actions/checkout@v4
            - name: 'Run Coding Style'
              run: check.sh $(pwd) $(pwd)
            - run: |
                cat $(pwd)/coding-style-reports.log
                if [ -s $(pwd)/coding-style-reports.log ]
                then
                    IFS=$IFS:
                    while read line; do
                        infos=()
                        for i in $line; do infos+=($i) ; done
                        echo "::error file=${infos[0]},line=${infos[1]},title=${infos[2]} coding style error::${infos[3]}"
                    done < $(pwd)/coding-style-reports.log
                    exit 1
                fi
    check_program_compilation:
        name: 'Check Program Compilation'
        runs-on: ubuntu-latest
        needs: check_coding_style
        container: epitechcontent/epitest-docker:latest
        steps:
            - name: 'Checkout'
              uses: actions/checkout@v4
            - name: 'Compile project'
              run: make
              timeout-minutes: 2
            - name: 'Clean'
              run: make clean
            - name: 'Check executables'
              run: |
                arrEXEC=$(echo ${{ env.EXECUTABLES }} | tr "," "\n")
                for exec in $arrEXEC
                    do
                        echo ${exec}
                        if [[ ! -f $exec ]]
                            then
                                echo "::error title=$exec::Missing $exec"
                                exit 1
                        fi
                        if [[ ! -x $exec ]]
                            then
                                echo "::error title=$exec::$exec is not executable"
                                exit 1
                        fi
                    done
    run_tests:
        name: 'Run Tests'
        runs-on: ubuntu-latest
        needs: check_program_compilation
        container: epitechcontent/epitest-docker:latest
        steps:
            - name: 'Checkout'
              uses: actions/checkout@v4
            - name: 'Run make tests_run'
              run: make tests_run
              timeout-minutes: 2
    push_to_mirror:
        name: 'Push to Mirror'
        if: github.event_name  == 'push'
        runs-on: ubuntu-latest
        needs: run_tests
        steps:
            - name: 'Checkout'
              uses: actions/checkout@v4
              with:  
                fetch-depth: 0 
            - name: 'Push to Mirror'
              uses: pixta-dev/repository-mirroring-action@v1
              with:
                target_repo_url:
                    ${{ env.MIRROR_URL }}
                ssh_private_key:
                    ${{ secrets.GIT_SSH_PRIVATE_KEY }}